import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id "maven-publish"
    id "signing"
    id "org.embulk.embulk-plugins" version "0.6.2" apply false
}

allprojects {
    group = "org.embulk"
    version = "0.11.0"
    description = "Inserts or updates records to a table."
}

subprojects {
    apply plugin: 'java'
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "org.embulk.embulk-plugins"

    repositories {
        mavenCentral()
    }

    configurations {
        defaultJdbcDriver
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.encoding = "UTF-8"
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
        withJavadocJar()
        withSourcesJar()
    }

    dependencies {
        compileOnly "org.embulk:embulk-spi:0.10.49"

        implementation("org.embulk:embulk-util-config:0.3.4") {
            // They conflict with embulk-core. They are once excluded here,
            // and added explicitly with versions exactly the same with older embulk-core (until v0.10.31).
            exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
            exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
            exclude group: "javax.validation", module: "validation-api"
        }

        // They are once excluded from transitive dependencies of other dependencies,
        // and added explicitly with versions exactly the same with older embulk-core (until 0.10.31).
        implementation "com.fasterxml.jackson.core:jackson-annotations:2.6.7"
        implementation "com.fasterxml.jackson.core:jackson-core:2.6.7"
        implementation "com.fasterxml.jackson.core:jackson-databind:2.6.7.5"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.7"
        implementation "javax.validation:validation-api:1.1.0.Final"

        implementation "org.embulk:embulk-util-json:0.3.0"
        implementation "org.embulk:embulk-util-timestamp:0.2.2"

        testImplementation  "org.embulk:embulk-junit4:0.10.49"
        testImplementation  "org.embulk:embulk-core:0.10.49"
        testImplementation  "org.embulk:embulk-deps:0.10.49"
    }

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    test {
        // JDBC output plugins depend on local time zone to parse timestamp without time stamp and datetime types.
        jvmArgs "-Duser.country=FI", "-Duser.timezone=Europe/Helsinki"
        environment "TZ", "Europe/Helsinki"
    }

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    gem {
        authors = [ "Hitoshi Tanaka" ]
        email = [ "thitoshi@cac.co.jp" ]
        summary = "JDBC output plugin for Embulk"
        homepage = "https://github.com/embulk/embulk-output-jdbc"
        licenses = [ "Apache-2.0" ]
    }

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }
}
